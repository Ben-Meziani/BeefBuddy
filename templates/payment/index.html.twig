{% extends 'base.html.twig' %}

{% block title %}Payment - BeefBuddy{% endblock %}

{% block body %}
{{ parent() }}
<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Complete Your Reservation</h3>
                </div>
                <div class="card-body">
                    <form id="checkout-form">
                        <div class="mb-3">
                            <label for="fighterId" class="form-label">Select Fighter</label>
                            <select class="form-select" id="fighterId" name="fighterId" required>
                                <option value="">Choose a fighter...</option>
                                {% for fighter in fighters %}
                                    <option value="{{ fighter.id }}" data-price="{{ fighter.pricePerTraining }}">
                                        {{ fighter.name }} - {{ fighter.weightClass }} (€{{ fighter.pricePerTraining }}/session)
                                    </option>
                                {% endfor %}
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="totalPrice" class="form-label">Total Price (€)</label>
                            <input type="number" class="form-control" id="totalPrice" name="totalPrice" readonly>
                        </div>

                        <div class="mb-3">
                            <label for="quantity" class="form-label">Number of Sessions</label>
                            <input type="number" class="form-control" id="quantity" name="quantity" value="1" min="1" max="10">
                        </div>

                        <button type="submit" class="btn btn-primary" id="checkout-btn" disabled>
                            <span id="btn-text">Proceed to Checkout</span>
                            <span id="btn-loading" class="spinner-border spinner-border-sm d-none" role="status"></span>
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('checkout-form');
    const fighterSelect = document.getElementById('fighterId');
    const quantityInput = document.getElementById('quantity');
    const totalPriceInput = document.getElementById('totalPrice');
    const checkoutBtn = document.getElementById('checkout-btn');
    const btnText = document.getElementById('btn-text');
    const btnLoading = document.getElementById('btn-loading');

    function updateTotalPrice() {
        const selectedOption = fighterSelect.options[fighterSelect.selectedIndex];
        if (selectedOption.value && selectedOption.dataset.price) {
            const price = parseInt(selectedOption.dataset.price);
            const quantity = parseInt(quantityInput.value) || 1;
            const total = price * quantity;
            totalPriceInput.value = total;
            checkoutBtn.disabled = false;
        } else {
            totalPriceInput.value = '';
            checkoutBtn.disabled = true;
        }
    }

    fighterSelect.addEventListener('change', updateTotalPrice);
    quantityInput.addEventListener('input', updateTotalPrice);

    form.addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = {
            fighterId: parseInt(fighterSelect.value),
            totalPrice: parseInt(totalPriceInput.value)
        };

        // Show loading state
        checkoutBtn.disabled = true;
        btnText.classList.add('d-none');
        btnLoading.classList.remove('d-none');

        try {
            const response = await fetch('/checkout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(formData)
            });

            const result = await response.json();

            if (result.success && result.checkout_url) {
                // Redirect to Stripe checkout
                window.location.href = result.checkout_url;
            } else {
                alert('Error: ' + (result.error || 'Unknown error occurred'));
                // Reset button state
                checkoutBtn.disabled = false;
                btnText.classList.remove('d-none');
                btnLoading.classList.add('d-none');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('An error occurred while processing your request. Please try again.');
            // Reset button state
            checkoutBtn.disabled = false;
            btnText.classList.remove('d-none');
            btnLoading.classList.add('d-none');
        }
    });
});
</script>
{% endblock %}
